#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os
import secrets

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

#This is specific to you module, so you need to change it accordingly.

def generate_random_password(length):
    # Generate random bytes and convert them to a hexadecimal string
    random_bytes = os.urandom(length)
    password = random_bytes.hex()
    return password[:length]

# Configure POSTGRES DB

POSTGRES_DB = data.get('POSTGRES_DB', 'docmost')
POSTGRES_USER = data.get('POSTGRES_USER', 'docmost')
POSTGRES_PASSWORD = generate_random_password(16)

posgtres_config = {
    'POSTGRES_DB': POSTGRES_DB,
    'POSTGRES_USER': POSTGRES_USER,
    'POSTGRES_PASSWORD': POSTGRES_PASSWORD
}
agent.write_envfile("database.env", posgtres_config)

DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@postgresql-app:5432/{POSTGRES_DB}"
APP_SECRET=secrets.token_hex(32)
REDIS_URL = "redis://redis-app:6379"

rdb = agent.redis_connect(use_replica=True)
smtp_settings = agent.get_smarthost_settings(rdb)
MAIL_DRIVER = "smtp"
MAIL_FROM_ADDRESS = smtp_settings['username']
MAIL_FROM_NAME = "DOCMOST"+"<"+MAIL_FROM_ADDRESS+">"
# SMTP Configuration
## Set the default values
SMTP_HOST=smtp_settings['host']
# OPTIONAL: Defines the port to use for sending emails.
SMTP_PORT=smtp_settings['port']
# OPTIONAL: Defines the username to use with the SMTP server.
SMTP_USERNAME=smtp_settings['username']
# OPTIONAL: Defines the password to use with the SMTP server.
SMTP_PASSWORD=smtp_settings['password']

app_config = {
    'DATABASE_URL': DATABASE_URL,
    'APP_SECRET': APP_SECRET,
    'REDIS_URL': REDIS_URL,
    'MAIL_DRIVER': MAIL_DRIVER,
    'MAIL_FROM_ADDRESS': MAIL_FROM_ADDRESS,
    'MAIL_FROM_NAME': MAIL_FROM_NAME,
    'SMTP_HOST': SMTP_HOST,
    'SMTP_PORT': SMTP_PORT,
    'SMTP_USERNAME': SMTP_USERNAME,
    'SMTP_PASSWORD': SMTP_PASSWORD
}
agent.write_envfile("app.env", app_config)
# just before starting systemd unit
#agent.dump_env()
